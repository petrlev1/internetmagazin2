<!-- ezEdit
 
  file:button.htc
  copyright:2000 SiteObjects, Inc.
  author:Brett Suwyn
  mailto:ezEdit@siteobjects.com
  http://www.siteobjects.com/
  
  version: 1.0 beta 1
  date:  8/8/2000
  
  notes:
    8/25/2000: added icon support to allow htc to function as custom tag
  
 -->
<public:component>
<public:attach event="onmousedown" onevent="buttonDown()"/>
<public:attach event="onmouseup" onevent="buttonUp()"/>
<public:attach event="onmouseout" onevent="buttonOut()"/>
<public:attach event="onmouseover" onevent="buttonOver()"/>
<public:attach event="oncontentready" onevent="buttonInit()"/>

<public:method name="getBooleanValue" internalname="getBooleanValue" />  

<!-- 
Valid Button Types
  button: default; acts as standard button
  switch: two states down or up
 -->
<public:property name="type" value="button"/>
<public:property name="pressed" value="0"/>
<public:property name="disable" value="0"/>
<public:property name="value"/>
<public:property name="text" value="" />
<public:property name="icon" value="" />
<public:property name="iconWidth" value="16" />
<public:property name="iconHeight" value="16" />

<script>
/*------------------------------------------------
          Event Handler Functions
---------------------------------------------------*/
function buttonOver(){
  if(!disable){
  	makeGray(false);   
    if (!pressed)
      makeRaised(); 
    else
      style.backgroundColor = "buttonface";   
  }
}

function buttonOut(){
  if(!disable){
    if(!pressed)
      makeFlat();
    else
      style.backgroundColor = "gainsboro";   
  	makeGray(true);    
  }
}

function buttonDown(){
  if(!disable){
    switch (type){
      case "switch":
        pressed = !pressed
        break;
      default:
        makePressed();
    }
  }
}
function buttonUp(){
  if(!disable){
    if (!pressed)
      makeFlat();
  }
}


/*------------------------------------------------
          State Functions
---------------------------------------------------*/
function makeFlat() {
	with (style) {
    if (type == "switch")
      backgroundColor = "buttonface";     
		border = "1px solid buttonface";
		padding = "1px";
	}
}

function makeRaised() {
	with (style) {
		borderLeft   = "1px solid buttonhighlight";
		borderRight  = "1px solid buttonshadow";
		borderTop    = "1px solid buttonhighlight";
		borderBottom = "1px solid buttonshadow";
		padding      = "1px";
	}
}

function makePressed() {
	with (style) {
    if (type == "switch")
      backgroundColor = "gainsboro";  
		borderLeft   = "1px solid buttonshadow";
		borderRight  = "1px solid buttonhighlight";
		borderTop    = "1px solid buttonshadow";
		borderBottom = "1px solid buttonhighlight";
		paddingTop    = "2px";
		paddingLeft   = "2px";
		paddingBottom = "0px";
		paddingRight  = "0px";
	}
}

function makeDisabled() {
	if (disable) {

		//innerHTML = '<span style="background: buttonshadow; width: 100%; height: 100%;">' +
						'<span style="filter:mask(Color=buttonface) DropShadow(Color=buttonhighlight, OffX=1, OffY=1, Positive=0); height: 100%; width: 100%;">' +
						innerHTML +
						'</span>' +
						'</span>';
    style.filter = "alpha(opacity=25)";
		if (element.onclick != null) {
			element.tb_onclick = element.onclick;
			element.onclick = null;
		}
	}
}

function makeEnable() {
	if (!disable) {
	
//		innerHTML = children[0].children[0].innerHTML;
    style.filter = "alpha(opacity=100)";
		if (element.tb_onclick != null) {
			element.onclick = element.tb_onclick;
			element.tb_onclick = null;
		}
	}
}

function makeGray(b) {
	var filtval;	
	if (b)
		filtval = "gray()";
	else
		filtval = "";
	var imgs = element.getElementsByTagName("IMG");
	for (var i=0; i<imgs.length; i++)
		imgs[i].style.filter = filtval;
}

/*------------------------------------------------
          Property Change Handlers
---------------------------------------------------*/
function buttonPropertyChange() {
	var pName = event.propertyName;
  switch (pName.toLowerCase()){
    case "pressed":
      if(pressed)
        makePressed();
      else
        makeFlat();
      break;
      
    case "disable":
      if(disable)
        makeDisabled();
      else
        makeEnable();    
    break;
  }

}



/*------------------------------------------------
          Utility Functions
---------------------------------------------------*/
function getBooleanValue(b){
  return (b.toLowerCase == "true" || b == "1");
}

/*------------------------------------------------
         Initialization Handler
---------------------------------------------------*/
function buttonInit(){
  // Need to reset these properties to boolean datatypes
  pressed = getBooleanValue(pressed);
  disable = getBooleanValue(disable);

  // Now attach event to capture all future property changes 
  attachEvent("onpropertychange", buttonPropertyChange);
  if (disable){
    makeDisabled();
  }
  
  var sCode = "<div nowrap style=\"text-align: center;><span style=\"vertical-align:middle\">";

  if (icon != ""){
  	sCode += '<img src="' + icon + '" align="absmiddle" style="width: ' + iconWidth + 'px; height: ' + iconHeight + 'px;">'  
  }
  if (text.length)
    sCode += "&nbsp;" + text;
  
  sCode += "</span></div>";
  innerHTML = sCode;  

  makeGray(true);  

}
</script>

</public:component>